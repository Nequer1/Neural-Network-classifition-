import torch                                                          
from torch.autograd import Variable                                     #导入Variable
import torch.nn.functional as F                                         #导入激活函数
from matplotlib import pyplot as plt                                   #导入画图包


                                                                        #伪数据
n_data = torch.ones(100, 2)                                             #数据的基本形态
x0 = torch.normal(2*n_data, 1)                                          #类型0 x data (tensor), shape=(100, 2)
y0 = torch.zeros(100)                                                   #类型0 y data (tensor), shape=(100, 1)
x1 = torch.normal(-2*n_data, 1)                                         #类型1 x data (tensor), shape=(100, 1)
y1 = torch.ones(100)                                                    #类型1 y data (tensor), shape=(100, 1)

x = torch.cat((x0, x1), 0).type(torch.FloatTensor)                      #合并数据x0和x1    FloatTensor = 32-bit floating
y = torch.cat((y0, y1), ).type(torch.LongTensor)                        #合并标签y0和y1    LongTensor = 64-bit integer


x = Variable(x)     
y = Variable(y)                                                         #将x，y放入Variable中


print("原始图像：")                                                     #打印伪数据原始图像
plt.scatter(x.data.numpy()[:, 0], x.data.numpy()[:, 1], c=y.data.numpy(), s=100, lw=1, cmap='RdYlGn')
plt.show()


class Net(torch.nn.Module):                                             #Net 继承于 torch.nn.Module 模块
    
    
    def __init__(self, n_feature, n_hidden, n_output):                   #初始化函数 
        super(Net, self).__init__()                                      #继承 __init__
        self.hidden = torch.nn.Linear(n_feature, n_hidden)               #隐藏层线性输出
        self.output = torch.nn.Linear(n_hidden, n_output)                #输出层线性输出
        
        
    def forward(self, x):                                                #向前传播函数
        x = F.relu(self.hidden(x))                                       #激励函数(隐藏层的线性值)
        x = self.output(x)                                               #输出值
        return x                                                        #返回输出值

    
    
print("神经网络：")
net=Net(2,10,2)                                                           #实例化: 两个输入， 十个神经元， 两个输出   
print(net)                                                                #将网络其打印出来
    

optimizer = torch.optim.SGD(net.parameters(), lr = 0.02)                  #optimizer(优化器):SGD（Stochastic Gradient Descent），learning rate = 0.02

loss_function = torch.nn.CrossEntropyLoss()                               #loss_functionc:CrossEntropyLoss()（用于多分类）


plt.ion()                                                                 #画图
plt.show()

print("训练过程：")                                                       #开始训练！
for step in range(200):
    output = net(x)                                                       #将x喂入到net中，计算output
    loss = loss_function(output, y)                                       #计算loss值
    
    
                                                                          #优化过程
    optimizer.zero_grad()                                                 #清空上一步残余更新参数值
    loss.backward()                                                       #误差反向传播，计算参数更新值
    optimizer.step()                                                      #将参数更新值写入到net的参数中
    
    
                                                                          #画图过程
    if step % 2 == 0:                                                    #每两步画一次图
        plt.cla()
        prediction = torch.max(F.softmax(output), 1)[1]                   #过了一道 softmax 的激励函数后的最大概率才是预测值
        pred_y = prediction.data.numpy().squeeze()
        target_y = y.data.numpy()
        plt.scatter(x.data.numpy()[:, 0], x.data.numpy()[:, 1], c=pred_y, s=100, lw=0, cmap='RdYlGn')
        accuracy = sum(pred_y == target_y)/200                           # 预测中有多少和真实值一样（准确率）
        plt.text(1, -4, 'Accuracy=%.2f' % accuracy, fontdict={'size': 15, 'color':  'red'})
        plt.pause(0.1)

plt.show()
plt.ioff()  # 停止画图

    
